import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { Button, Card, CardContent, Typography, CardActions } from "@mui/material";
import Navbar from "../components/Navbar";

const Home = () => {
  const navigate = useNavigate();
  const [role] = useState(localStorage.getItem("role")?.trim().toLowerCase() || "");
  const [popularDocs, setPopularDocs] = useState([]);
  const [stats, setStats] = useState({ users: 0, documents: 0, downloads: 0, uploadsLast7Days: [], topCategories: [], usersByRole: [] });
  const [docCategoryNames, setDocCategoryNames] = useState({});

  useEffect(() => {
    console.log("Role:", role);
    if (role === "student" || role === "teacher") {
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡∏Å‡πà‡∏≠‡∏ô
      console.log("Testing API connection...");
      axios
        .get("http://localhost:3000/api/documents/test")
        .then((res) => {
          console.log("Test API response:", res.data);
          
          // ‡∏ñ‡πâ‡∏≤ API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
          console.log("Fetching recommended documents...");
          return axios.get("http://localhost:3000/api/documents/recommended");
        })
        .then(async (res) => {
          console.log("Recommended documents response:", res.data);
          console.log("Response length:", res.data.length);
          const docs = res.data || [];
          setPopularDocs(docs);

          // ‡πÄ‡∏ï‡∏¥‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î (‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ /api/documents/:id ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ category_names)
          try {
            const detailResults = await Promise.all(
              docs.map((doc) =>
                axios
                  .get(`http://localhost:3000/api/documents/${doc.document_id}`)
                  .then((dres) => ({ id: doc.document_id, detail: dres.data, fallback: doc }))
                  .catch(() => ({ id: doc.document_id, detail: null, fallback: doc }))
              )
            );
            const map = {};
            detailResults.forEach(({ id, detail, fallback }) => {
              let names = "-";
              const cats = detail?.categories;
              if (Array.isArray(cats) && cats.length) {
                names = cats.map((c) => c.name).join(", ");
              } else if (fallback && typeof fallback.category_names === 'string' && fallback.category_names.length) {
                names = fallback.category_names;
              }
              map[id] = names;
            });
            setDocCategoryNames(map);
          } catch (e) {
            console.warn("Unable to enrich categories for recommended docs", e);
          }
        })
        .catch((err) => {
          console.error("Error fetching recommended documents:", err);
          console.error("Error details:", err.response?.data);
        });
    }

    if (role === "admin") {
      axios
        .get("http://localhost:3000/api/admin/stats")
        .then((res) => setStats(res.data))
        .catch((err) => console.error(err));
    }
  }, [role]);

  return (
    <div>
      <Navbar />

      <div className="p-6 mt-16 max-w-7xl mx-auto">
        <Typography variant="h4" gutterBottom>
          ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö{" "}
          {role === "student"
            ? "‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤"
            : role === "teacher"
            ? "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå"
            : role === "admin"
            ? "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö"
            : ""}
        </Typography>

        {/* ================= Student & Teacher Actions ================= */}
        {(role === "student" || role === "teacher") && (
          <div className="mb-8">
            <Button
              variant="contained"
              color={role === "student" ? "primary" : "secondary"}
              onClick={() =>
                role === "student" ? navigate("/upload") : navigate("/reviews")
              }
              sx={{ mb: 4 }}
            >
              {role === "student" ? "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà" : "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤"}
            </Button>
          </div>
        )}

        {/* ================= Admin Stats ================= */}
        {role === "admin" && (
          <div className="space-y-6 mb-8">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Card><CardContent><Typography variant="h6">üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</Typography><Typography variant="h4">{stats.users}</Typography></CardContent></Card>
              <Card><CardContent><Typography variant="h6">üìö ‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</Typography><Typography variant="h4">{stats.documents}</Typography></CardContent></Card>
              <Card><CardContent><Typography variant="h6">‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏ß‡∏°</Typography><Typography variant="h4">{stats.downloads}</Typography></CardContent></Card>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</Typography>
                  <div className="space-y-2">
                    {stats.uploadsLast7Days.length === 0 ? (
                      <Typography color="text.secondary">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</Typography>
                    ) : (
                      stats.uploadsLast7Days.map((r, idx) => (
                        <div key={idx} className="flex justify-between text-sm">
                          <span>{new Date(r.day).toLocaleDateString('th-TH')}</span>
                          <span className="font-semibold">{r.count}</span>
                        </div>
                      ))
                    )}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°</Typography>
                  <div className="space-y-2">
                    {stats.topCategories.length === 0 ? (
                      <Typography color="text.secondary">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</Typography>
                    ) : (
                      stats.topCategories.map((r, idx) => (
                        <div key={idx} className="flex justify-between text-sm">
                          <span>{r.category}</span>
                          <span className="font-semibold">{r.count}</span>
                        </div>
                      ))
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>

            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏¢‡∏≠‡∏î‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î</Typography>
                <div className="space-y-2">
                  {!stats.topDocuments || stats.topDocuments.length === 0 ? (
                    <Typography color="text.secondary">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</Typography>
                  ) : (
                    stats.topDocuments.map((d) => (
                      <button
                        key={d.document_id}
                        className="w-full flex justify-between text-left text-sm hover:bg-gray-50 p-1 rounded"
                        onClick={async () => {
                          try {
                            const res = await fetch(`http://localhost:3000/api/admin/documents/${d.document_id}/file-downloads`);
                            const files = await res.json();
                            const list = files && files.length
                              ? files.map(f => `${f.section || 'main'} - ${(f.original_name || 'file')} : ${f.download_count}`).join('\n')
                              : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î';
                            alert(`‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á: ${d.title}\n\n${list}`);
                          } catch (e) {
                            alert('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                          }
                        }}
                        title={d.title}
                      >
                        <span className="truncate max-w-[70%]">{d.title}</span>
                        <span className="font-semibold">{d.download_count}</span>
                      </button>
                    ))
                  )}
                </div>
              </CardContent>
            </Card>

            <div>
              <Button
                variant="contained"
                color="primary"
                component="a"
                href="http://localhost:3001/admin"
              >
                ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
              </Button>
            </div>
          </div>
        )}

        {/* ================= Recommended Documents ================= */}
        {(role === "student" || role === "teacher") && (
          <div>
            <Typography variant="h5" gutterBottom className="mb-4">
              üåü ‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            </Typography>
            
            {popularDocs.length === 0 ? (
              <Typography variant="body1" color="text.secondary">
                ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
              </Typography>
            ) : (
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                {popularDocs.map((doc) => (
                  <Card
                    key={doc.document_id}
                    className="shadow-lg hover:shadow-2xl transition rounded-xl"
                  >
                    <CardContent>
                      <Typography variant="h6" gutterBottom className="line-clamp-2">
                        {doc.title}
                      </Typography>
                      <Typography variant="body2" color="text.secondary" className="mb-2">
                        ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {docCategoryNames[doc.document_id] ?? "-"}
                      </Typography>
                      <Typography variant="body2" color="text.secondary" className="mb-2">
                        ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {doc.keywords || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
                      </Typography>
                      <Typography variant="body2" color="text.secondary" className="mb-2">
                        ‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤: {doc.academic_year || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
                      </Typography>
                      <Typography variant="body2" color="text.secondary" className="mb-2">
                        ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î: {Number.isFinite(parseInt(doc.download_count)) ? parseInt(doc.download_count) : 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                      </Typography>
                    </CardContent>
                    <CardActions>
                      <Button
                        size="small"
                        variant="outlined"
                      onClick={() => navigate(`/document-detail/${doc.document_id}`)}
                      >
                        ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                      </Button>
                    </CardActions>
                  </Card>
                ))}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default Home;